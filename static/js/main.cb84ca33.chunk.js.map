{"version":3,"sources":["assets/noPosterSmall.png","Components/Section.js","Components/Loader.js","Components/Message.js","Components/Poster.js","Routes/Home/HomePresenter.js","api.js","Routes/Home/index.js","Routes/Home/HomeContainer.js","Routes/TV/TVPresenter.js","Routes/TV/index.js","Routes/TV/TVContainer.js","Components/Header.js","Routes/Search/SearchPresenter.js","Routes/Search/index.js","Routes/Search/SearchContainer.js","Routes/Detail/DetailPresenter.js","Routes/Detail/index.js","Routes/Detail/DetailContainer.js","Components/Router.js","Components/GlobalStyles.js","Components/App.js","index.js"],"names":["module","exports","Container","styled","div","Title","span","Grid","Section","title","children","role","aria-label","Text","props","color","Message","text","Image","bgUrl","Rating","ImageContainer","Year","Poster","id","imageUrl","rating","year","isMovie","to","require","length","substring","HomePresenter","nowPlaying","popular","upcoming","loading","error","Helmet","Loader","map","movie","key","original_title","poster_path","vote_average","release_date","api","axios","create","baseURL","params","api_key","language","moviesApi","get","append_to_response","term","query","encodeURIComponent","tvApi","HomeContainer","state","data","results","this","setState","React","Component","TVPresenter","topRated","airingToday","tv","original_name","first_air_date","show","today","TVContainer","Header","header","List","ul","Item","li","current","SLink","Link","withRouter","pathname","location","Form","form","Input","input","SearchPresenter","movieResults","tvResults","searchTerm","handleSubmit","updateTerm","onSubmit","placeholder","value","onChange","SearchContainer","event","preventDefault","searchByTerm","target","console","log","a","Backdrop","bgImage","Content","Cover","Data","h1","ItemContainer","Divider","Overview","p","DetailPresenter","result","backdrop_path","runtime","episode_run_time","genres","genre","index","name","overview","DetailContainer","includes","match","push","history","parsedId","parseInt","isNaN","path","exact","component","Home","TV","Search","Detail","from","globalStyles","createGlobalStyle","reset","App","Router","GlobalStyles","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.cb84ca33.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/noPosterSmall.92cc8e5e.png\";","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Container = styled.div`\r\n  :not(:last-child) {\r\n    margin-bottom: 50px;\r\n  }\r\n`;\r\n\r\nconst Title = styled.span`\r\n  font-size: 20px;\r\n  font-weight: 600;\r\n`; //movie탭의 타이틀 글씨 크게 하는거.\r\n\r\nconst Grid = styled.div`\r\n  margin-top: 25px;\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fill, 125px);\r\n  grid-gap: 25px;\r\n`;\r\nconst Section = ({ title, children }) => (\r\n  <Container>\r\n    <Title>{title}</Title>\r\n    <Grid>{children}</Grid>\r\n  </Container>\r\n);\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node]),\r\n};\r\n\r\nexport default Section;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Container = styled.div`\r\n  height: 100vh;\r\n  width: 100vh;\r\n  display: flex;\r\n  justify-content: center;\r\n  font-size: 50px;\r\n  margin-top: 20px;\r\n`;\r\n\r\nexport default () => (\r\n  <Container>\r\n    <span role=\"img\" aria-label=\"Loading\">\r\n      🚴‍♂️\r\n    </span>\r\n  </Container>\r\n);\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Container = styled.div`\r\n  width: 100vw;\r\n  display: flex;\r\n  justify-content: center;\r\n`;\r\n\r\nconst Text = styled.span`\r\n  color: ${(props) => props.color};\r\n  font-size: 30px;\r\n`;\r\n\r\nconst Message = ({ text, color }) => (\r\n  <Container>\r\n    <Text color={color}>{text}</Text>\r\n  </Container>\r\n);\r\n\r\nMessage.propTypes = {\r\n  text: PropTypes.string.isRequired,\r\n  color: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Message;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Link } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\n//import { fas fa-star } from \"@fortawesome/free-solid-svg-icons\"\r\n\r\nconst Container = styled.div`\r\n  font-size: 12px;\r\n`;\r\n\r\nconst Image = styled.div`\r\n  background-image: url(${(props) => props.bgUrl});\r\n  height: 180px; /* 이거 안 넣으니 사진 안 나오더라. */\r\n  background-size: cover; /* 그림사이즈가 커서 꽉 채우기 효과 넣음 */\r\n  border-radius: 5px;\r\n  background-position: center center;\r\n  transition: opacity 0.1s linear; /* 포스터에 마우스 가져다 대면 페이드 효과 */\r\n`;\r\n\r\nconst Rating = styled.span`\r\n  bottom: 10px;\r\n  right: 5px; /* 이걸로 오른쪽 정렬 */\r\n  position: absolute; /*이것과 밑에 positiong:relative 연계해서 평점을 포스터에 넣음 */\r\n  opacity: 0;\r\n`;\r\n\r\nconst ImageContainer = styled.div`\r\n  margin-bottom: 5px;\r\n  position: relative; /* 위에 positiong:absolute랑 연계해서 포스터안에 평점 넣음 */\r\n  &:hover {\r\n    ${Image} {\r\n      opacity: 0.3;\r\n    } /*이부분으로 인해 포스터를 담은 컨테이너에 마우스 가져다 대면 희미해짐*/\r\n    ${Rating} {\r\n      opacity: 1;\r\n    } /*이것과 위에 23줄 연계 */\r\n  }\r\n`;\r\n\r\nconst Title = styled.span`\r\n  display: block;\r\n  margin-bottom: 4px;\r\n`;\r\n\r\nconst Year = styled.span`\r\n  font-size: 10px;\r\n  color: rgba(255, 255, 255, 0.5); /*맨 마지막 0.5는 투명도 */\r\n`;\r\n\r\n// const Star = styled.span`\r\n//   display: fiex;\r\n//   justify-content: space-between;\r\n//   width: 60%;\r\n//   background: -webkit-linear-gradient(\r\n//     left,\r\n//     #f1c40f ${(props) => props.percenter}%,\r\n//     #555 ${(props) => 100 - props.percenter}%\r\n//   );\r\n// `;\r\n\r\nconst Poster = ({ id, imageUrl, title, rating, year, isMovie = false }) => (\r\n  <Link to={isMovie ? `/movie/${id}` : `/show/${id}`}>\r\n    <Container>\r\n      <ImageContainer>\r\n        <Image /* 밑에 명령어는 이미지가 있으면 있는거 보여주고 없으면 내가 지정한 포스터 보여줌 */\r\n          bgUrl={\r\n            imageUrl ? `https://image.tmdb.org/t/p/w300${imageUrl}` : require(\"../assets/noPosterSmall.png\")\r\n          }\r\n        />\r\n        <Rating>\r\n          {rating}/10\r\n          <span role=\"img\" aria-label=\"rating\">\r\n            ✨\r\n          </span>\r\n        </Rating>\r\n      </ImageContainer>\r\n      <Title>{title.length > 18 ? `${title.substring(0, 18)}...` : title}</Title>\r\n      <Year>{year}</Year>\r\n    </Container>\r\n  </Link>\r\n);\r\n\r\nPoster.propTypes = {\r\n  id: PropTypes.number.isRequired,\r\n  imageUrl: PropTypes.string,\r\n  title: PropTypes.string.isRequired,\r\n  rating: PropTypes.number,\r\n  year: PropTypes.string,\r\n  isMovie: PropTypes.bool,\r\n};\r\n\r\nexport default Poster;\r\n\r\n/* <Star percenter={rating * 10}>\r\n            <i class=\"fas fa-star\"></i>\r\n            <i class=\"fas fa-star\"></i>\r\n            <i class=\"fas fa-star\"></i>\r\n            <i class=\"fas fa-star\"></i>\r\n            <i class=\"fas fa-star\"></i>\r\n          </Star> */\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\nimport { Helmet } from \"react-helmet\";\r\nimport Section from \"../../Components/Section\";\r\nimport Loader from \"../../Components/Loader\";\r\nimport Message from \"../../Components/Message\";\r\nimport Poster from \"../../Components/Poster\";\r\n\r\nconst Container = styled.div`\r\n  padding: 20px;\r\n`;\r\n\r\nconst HomePresenter = ({ nowPlaying, popular, upcoming, loading, error }) => (\r\n  <>\r\n    <Helmet>\r\n      <title>Movie ParkFlix</title>\r\n    </Helmet>\r\n    {loading ? (\r\n      <Loader />\r\n    ) : (\r\n      <Container>\r\n        {nowPlaying && nowPlaying.length > 0 && (\r\n          <Section title=\"Now Playing\">\r\n            {nowPlaying.map((movie) => (\r\n              <Poster\r\n                key={movie.id}\r\n                id={movie.id}\r\n                title={movie.original_title}\r\n                imageUrl={movie.poster_path}\r\n                rating={movie.vote_average} //now_playing 네트워크에서 보니까. 평점은 이거임.\r\n                year={movie.release_date && movie.release_date.substring(0, 4)} //substring은 자를수 있게 함.\r\n                isMovie={true}\r\n              />\r\n            ))}\r\n          </Section>\r\n        )}\r\n        {upcoming && upcoming.length > 0 && (\r\n          <Section title=\"Upcoming Movies\">\r\n            {upcoming.map((movie) => (\r\n              <Poster\r\n                key={movie.id}\r\n                id={movie.id}\r\n                title={movie.original_title}\r\n                imageUrl={movie.poster_path}\r\n                rating={movie.vote_average} //now_playing 네트워크에서 보니까. 평점은 이거임.\r\n                year={movie.release_date && movie.release_date.substring(0, 4)} //substring은 자를수 있게 함.\r\n                isMovie={true}\r\n              />\r\n            ))}\r\n          </Section>\r\n        )}\r\n        {popular && popular.length > 0 && (\r\n          <Section title=\"Popular Movies\">\r\n            {popular.map((movie) => (\r\n              <Poster\r\n                key={movie.id}\r\n                id={movie.id}\r\n                title={movie.original_title}\r\n                imageUrl={movie.poster_path}\r\n                rating={movie.vote_average} //now_playing 네트워크에서 보니까. 평점은 이거임.\r\n                year={movie.release_date && movie.release_date.substring(0, 4)} //substring은 자를수 있게 함.\r\n                isMovie={true}\r\n              />\r\n            ))}\r\n          </Section>\r\n        )}\r\n        {error && <Message color=\"#e74c3c\" text={error} />}\r\n      </Container>\r\n    )}\r\n  </>\r\n);\r\n\r\nHomePresenter.propTypes = {\r\n  nowPlaying: PropTypes.array,\r\n  popular: PropTypes.array,\r\n  upcomfing: PropTypes.array,\r\n  loading: PropTypes.bool.isRequired,\r\n  error: PropTypes.string,\r\n};\r\n\r\nexport default HomePresenter;\r\n","import axios from \"axios\";\r\n\r\nconst api = axios.create({\r\n  baseURL: \"https://api.themoviedb.org/3/\",\r\n  params: { api_key: \"6fb2ddee38097eab9545787dc742e164\", language: \"en-US\" },\r\n});\r\n\r\n//https://api.themoviedb.org/3/movie/popular?api_key=<<api_key>>&language=en-US&page=1\r\n//이 주소를 보면 알겠지만 뒤에 api_key와 language가 있기 때문에\r\n//api.get(\"tv/popular\");\r\n//밑에 append_to_response 는 예고편 유튜브 같은거. www.youtube.com/watch?v= 에다가 key를 뒤에 붙이면 나옴.\r\n\r\nexport const moviesApi = {\r\n  nowPlaying: () => api.get(\"movie/now_playing\"),\r\n  upcoming: () => api.get(\"movie/upcoming\"),\r\n  popular: () => api.get(\"movie/popular\"),\r\n  movieDetail: (id) => api.get(`movie/${id}`, { params: { append_to_response: \"videos\" } }),\r\n  search: (term) => api.get(\"search/movie\", { params: { query: encodeURIComponent(term) } }),\r\n};\r\n//encodeURIComponent는 string으로 바꾸기 위해서 하는것임. URL에서 인코딩을 해줘야해서.\r\n\r\nexport const tvApi = {\r\n  topRated: () => api.get(\"tv/top_rated\"),\r\n  popular: () => api.get(\"tv/popular\"),\r\n  airingToday: () => api.get(\"tv/airing_today\"),\r\n  showDetail: (id) => api.get(`tv/${id}`, { params: { append_to_response: \"videos\" } }),\r\n  search: (term) => api.get(\"search/tv\", { params: { query: encodeURIComponent(term) } }),\r\n};\r\n","import HomeContainer from \"./HomeContainer\";\r\n\r\nexport default HomeContainer;\r\n","import React from \"react\";\r\nimport HomePresenter from \"./HomePresenter\";\r\nimport { moviesApi } from \"api\";\r\n\r\nexport default class extends React.Component {\r\n  // componentWillMount() {\r\n  //   console.log(\"componentWillMount 확인\");\r\n  // }\r\n  state = { nowPlaying: null, upcoming: null, popular: null, error: null, loading: true };\r\n  async componentDidMount() {\r\n    try {\r\n      const {\r\n        data: { results: nowPlaying }, //뒤에 nowPlaying이거는 이름 변수명 지정.\r\n      } = await moviesApi.nowPlaying();\r\n      const {\r\n        data: { results: upcoming },\r\n      } = await moviesApi.upcoming();\r\n      const {\r\n        data: { results: popular },\r\n      } = await moviesApi.popular();\r\n      this.setState({ nowPlaying, upcoming, popular }); //nowPlaying:nowPlaying\r\n      // const nowPlaying = await moviesApi.nowPlaying();\r\n      // console.log(nowPlaying);\r\n      //위의 예는 moviesApi.js의 nowPlaying를 불러와서 data안의 results 데이터를 nowPlaying이름으로 활용\r\n    } catch (error) {\r\n      this.setState({ error: \"Can't find Movie information\" });\r\n    } finally {\r\n      this.setState({ loading: false });\r\n    }\r\n  }\r\n  render() {\r\n    const { nowPlaying, upcoming, popular, error, loading } = this.state;\r\n    //console.log(this.state);\r\n    return (\r\n      <HomePresenter\r\n        nowPlaying={nowPlaying}\r\n        upcoming={upcoming}\r\n        popular={popular}\r\n        error={error}\r\n        loading={loading}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\n// export default class extends React.Component {\r\n//   state = { nowPlaying: null, upcoming: null, popular: null, error: null, loading: true };\r\n//   async componentDidMount() {\r\n//     try {\r\n//       const {\r\n//         data: { results: nowPlaying }, //뒤에 nowPlaying이거는 이름 변수명 지정.\r\n//       } = await moviesApi.nowPlaying();\r\n//       const {\r\n//         data: { results: upcoming },\r\n//       } = await moviesApi.upcoming();\r\n//       const {\r\n//         data: { results: popular },\r\n//       } = await moviesApi.popular;\r\n//       this.setState({ nowPlaying, upcoming, popular }); //nowPlaying:nowPlaying\r\n//       // const nowPlaying = await moviesApi.nowPlaying();\r\n//       // console.log(nowPlaying);\r\n//     } catch (error) {\r\n//       this.setState({ error: \"Can't find Movie information\" });\r\n//     } finally {\r\n//       this.setState({ loading: false });\r\n//     }\r\n//   }\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\nimport { Helmet } from \"react-helmet\";\r\nimport Section from \"../../Components/Section\";\r\nimport Loader from \"../../Components/Loader\";\r\nimport Message from \"../../Components/Message\";\r\nimport Poster from \"../../Components/Poster\";\r\n\r\nconst Container = styled.div`\r\n  padding: 20px;\r\n`;\r\n\r\nconst TVPresenter = ({ topRated, popular, airingToday, loading, error }) => (\r\n  <>\r\n    <Helmet>\r\n      <title>TV ParkFlix</title>\r\n    </Helmet>\r\n    {loading ? (\r\n      <Loader />\r\n    ) : (\r\n      <Container>\r\n        {topRated && topRated.length > 0 && (\r\n          <Section title=\"Top Rated Shows\">\r\n            {topRated.map((tv) => (\r\n              <Poster\r\n                key={tv.id}\r\n                id={tv.id}\r\n                title={tv.original_name}\r\n                imageUrl={tv.poster_path}\r\n                rating={tv.vote_average} //now_playing 네트워크에서 보니까. 평점은 이거임.\r\n                year={tv.first_air_date && tv.first_air_date.substring(0, 4)} //substring은 자를수 있게 함.\r\n              />\r\n            ))}\r\n          </Section>\r\n        )}\r\n        {popular && popular.length > 0 && (\r\n          <Section title=\"Popular Shows\">\r\n            {popular.map((show) => (\r\n              <Poster\r\n                key={show.id}\r\n                id={show.id}\r\n                title={show.original_name}\r\n                imageUrl={show.poster_path}\r\n                rating={show.vote_average} //now_playing 네트워크에서 보니까. 평점은 이거임.\r\n                year={show.first_air_date && show.first_air_date.substring(0, 4)} //substring은 자를수 있게 함.\r\n              />\r\n            ))}\r\n          </Section>\r\n        )}\r\n        {airingToday && airingToday.length > 0 && (\r\n          <Section title=\"Airing Today\">\r\n            {airingToday.map((today) => (\r\n              <Poster\r\n                key={today.id}\r\n                id={today.id}\r\n                title={today.original_name}\r\n                imageUrl={today.poster_path}\r\n                rating={today.vote_average} //now_playing 네트워크에서 보니까. 평점은 이거임.\r\n                year={today.first_air_date && today.first_air_date.substring(0, 4)} //substring은 자를수 있게 함.\r\n                isMovie={true}\r\n              />\r\n            ))}\r\n          </Section>\r\n        )}\r\n        {error && <Message color=\"#e74c3c\" text={error} />}\r\n      </Container>\r\n    )}\r\n  </>\r\n);\r\n//if topRated exists AND topRate is longer than 0 SHOW topRated.map()\r\n//The last && is the one that will show up!\r\n//condition && condition && topRated.map() (true)\r\n//자바스크립트 표현 if(topRated && topRated.length){topRated.map(show => show.name)}\r\n\r\nTVPresenter.propTypes = {\r\n  topRated: PropTypes.array,\r\n  popular: PropTypes.array,\r\n  airingToday: PropTypes.array,\r\n  loading: PropTypes.bool.isRequired,\r\n  error: PropTypes.string,\r\n};\r\n\r\nexport default TVPresenter;\r\n","import TVContainer from \"./TVContainer\";\r\n\r\nexport default TVContainer;\r\n","import React from \"react\";\r\nimport TVPresenter from \"./TVPresenter\";\r\nimport { tvApi } from \"../../api\";\r\n\r\nexport default class extends React.Component {\r\n  state = {\r\n    topRated: null,\r\n    popular: null,\r\n    airingToday: null,\r\n    loading: true,\r\n    error: null,\r\n  };\r\n  async componentDidMount() {\r\n    try {\r\n      const {\r\n        data: { results: topRated },\r\n      } = await tvApi.topRated();\r\n      const {\r\n        data: { results: popular },\r\n      } = await tvApi.popular();\r\n      const {\r\n        data: { results: airingToday },\r\n      } = await tvApi.airingToday();\r\n      this.setState({ topRated, popular, airingToday });\r\n    } catch {\r\n      this.setState({\r\n        error: \"Can't find TV information.\",\r\n      });\r\n    } finally {\r\n      this.setState({ loading: false });\r\n    }\r\n  }\r\n  render() {\r\n    const { topRated, popular, airingToday, loading, error } = this.state;\r\n    return (\r\n      <TVPresenter\r\n        topRated={topRated}\r\n        popular={popular}\r\n        airingToday={airingToday}\r\n        loading={loading}\r\n        error={error}\r\n      />\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport { Link, withRouter } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Header = styled.header`\r\n  color: white; /*기본 블랙이라 이걸 적어줘야 보임 */\r\n  font-size: 20px;\r\n  position: fixed; /* 스크롤 내려도 그 위치에 있음 */\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 50px;\r\n  display: flex;\r\n  align-items: center; /*세로축 에서 items의 정렬 방법을 설정, justify-content는 가로축 */\r\n  background-color: rgba(20, 20, 20, 0.8);\r\n  z-index: 10; /*어느객체가 앞으로 나오고 뒤에 나올지 배치 순서를 결정하는 속성 */\r\n  /*z-index는 position(relative, absolute, fixed)속성이 적용된 요소에서만 작동함 */\r\n  box-shadow: 0px 1px 5px 2px rgba(0, 0, 0, 0.8);\r\n`;\r\n\r\nconst List = styled.ul`\r\n  display: flex;\r\n  /* &:hover {\r\n    background-color: blue;\r\n  } */\r\n`;\r\n\r\nconst Item = styled.li`\r\n  width: 100px;\r\n  height: 50px;\r\n  text-align: center; /*Link안에 텍스트 가운데로*/\r\n  border-bottom: 3px solid ${(props) => (props.current ? \"gold\" : \"transparent\")};\r\n  /*함수를 적는 이유는 노란색 bottom이 Movies, TV, Search 각각 클릭 한곳에만 있게 하기 위해 */\r\n  /*밑에 노란색 공간 크기, 밑에 current가 true면 앞에꺼 false면 뒤에 색깔 transparent는 투명 */\r\n  transition: border-bottom 0.3s ease-in-out; /*클릭시 아래선 효과 */\r\n  /* &:not(:last-child) {\r\n    margin-right: 50px; /*이거 붙임으로서 Movie TV search 간격\r\n  } */\r\n`;\r\n\r\nconst SLink = styled(Link)`\r\n  /*이걸로 박스안에 글씨, 위치 및 속성 설정 */\r\n  height: 50px;\r\n  display: flex; /*박스 클릭하면 글씨 클릭처럼 되게끔 및 아래 효과 적용을 위해*/\r\n  align-items: center; /*세로 위치선정 */\r\n  justify-content: center; /*가로 위치선정 */\r\n`; //위에 import 이름 중복 방지를 위해 S를 붙임.\r\n\r\nexport default withRouter(({ location: { pathname } }) => (\r\n  <Header>\r\n    <List>\r\n      <Item current={pathname === \"/\"}>\r\n        <SLink to=\"/\">Movies</SLink>\r\n      </Item>\r\n      <Item current={pathname === \"/tv\"}>\r\n        <SLink to=\"/tv\">TV</SLink>\r\n      </Item>\r\n      <Item current={pathname === \"/search\"}>\r\n        <SLink to=\"/search\">Search</SLink>\r\n      </Item>\r\n    </List>\r\n  </Header>\r\n));\r\n//current는 boolean 타입임. 따라서 current가 true이려면 pathname이 '/' 이어야함.\r\n//wirthRouter는 다른 컴포넌트를 감싸는 컴포넌트임.그리고 Router에 어떠한 정보를 주지\r\n//Link 와 to 같이 쓰이니 기억하기.\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\nimport { Helmet } from \"react-helmet\";\r\nimport Loader from \"Components/Loader\";\r\nimport Section from \"Components/Section\";\r\nimport Message from \"Components/Message\";\r\nimport Poster from \"Components/Poster\";\r\n\r\nconst Container = styled.div`\r\n  padding: 0px 20px;\r\n`;\r\n\r\nconst Form = styled.form`\r\n  margin-bottom: 50px;\r\n  width: 100%;\r\n`;\r\n\r\nconst Input = styled.input`\r\n  all: unset;\r\n  font-size: 28px;\r\n  width: 100%;\r\n`;\r\n\r\nconst SearchPresenter = ({\r\n  movieResults,\r\n  tvResults,\r\n  loading,\r\n  searchTerm,\r\n  handleSubmit,\r\n  error,\r\n  updateTerm,\r\n}) => (\r\n  <Container>\r\n    <Helmet>\r\n      <title>Search ParkFlix</title>\r\n    </Helmet>\r\n    <Form onSubmit={handleSubmit}>\r\n      <Input placeholder=\"Search Movies or TV Shows...\" value={searchTerm} onChange={updateTerm} />\r\n    </Form>\r\n    {loading ? (\r\n      <Loader />\r\n    ) : (\r\n      <>\r\n        {movieResults && movieResults.length > 0 && (\r\n          <Section title=\"Movie Results\">\r\n            {movieResults.map((movie) => (\r\n              <Poster\r\n                key={movie.id}\r\n                id={movie.id}\r\n                title={movie.original_title}\r\n                imageUrl={movie.poster_path}\r\n                rating={movie.vote_average} //now_playing 네트워크에서 보니까. 평점은 이거임.\r\n                year={movie.release_date && movie.release_date.substring(0, 4)} //substring은 자를수 있게 함.\r\n                isMovie={true}\r\n              />\r\n            ))}\r\n          </Section>\r\n        )}\r\n        {tvResults && tvResults.length > 0 && (\r\n          <Section title=\"TV Show Results\">\r\n            {tvResults.map((show) => (\r\n              <Poster\r\n                key={show.id}\r\n                id={show.id}\r\n                title={show.original_name}\r\n                imageUrl={show.poster_path}\r\n                rating={show.vote_average} //now_playing 네트워크에서 보니까. 평점은 이거임.\r\n                year={show.first_air_date && show.first_air_date.substring(0, 4)} //substring은 자를수 있게 함.\r\n                isMovie={true}\r\n              />\r\n            ))}\r\n          </Section>\r\n        )}\r\n        {error && <Message color=\"#e74c3c\" text={error} />}\r\n        {tvResults && movieResults && tvResults.length === 0 && movieResults.length === 0 && (\r\n          <Message text=\"Nothing found\" color=\"#95a5a6\" />\r\n        )}\r\n      </>\r\n    )}\r\n  </Container>\r\n);\r\n\r\nSearchPresenter.propTypes = {\r\n  movieResults: PropTypes.array,\r\n  tvResults: PropTypes.array,\r\n  error: PropTypes.string,\r\n  searchTerm: PropTypes.string,\r\n  loading: PropTypes.bool.isRequired,\r\n  handleSubmit: PropTypes.func.isRequired,\r\n  updateTerm: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default SearchPresenter;\r\n","import SearchContainer from \"./SearchContainer\";\r\n\r\nexport default SearchContainer;\r\n","import React from \"react\";\r\nimport SearchPresenter from \"./SearchPresenter\";\r\nimport { moviesApi, tvApi } from \"../../api\";\r\n\r\nexport default class extends React.Component {\r\n  state = {\r\n    movieResults: null,\r\n    tvResults: null,\r\n    searchTerm: \"\",\r\n    loading: false,\r\n    error: null,\r\n  };\r\n\r\n  handleSubmit = (event) => {\r\n    event.preventDefault(); //검색란에 글씨 넣고 enter쳐도 새로고침, 즉 state를 잃지 않음.\r\n    const { searchTerm } = this.state;\r\n    if (searchTerm !== \"\") {\r\n      this.searchByTerm();\r\n    }\r\n  };\r\n\r\n  updateTerm = (event) => {\r\n    const {\r\n      target: { value },\r\n    } = event;\r\n    console.log(value);\r\n    this.setState({ searchTerm: value });\r\n  };\r\n\r\n  searchByTerm = async () => {\r\n    const { searchTerm } = this.state;\r\n    this.setState({ loading: true });\r\n    try {\r\n      const {\r\n        data: { results: movieResults },\r\n      } = await moviesApi.search(searchTerm);\r\n      const {\r\n        data: { results: tvResults },\r\n      } = await tvApi.search(searchTerm);\r\n      this.setState({ movieResults, tvResults });\r\n    } catch (error) {\r\n      this.setState({ error: \"Can't find results\" });\r\n    } finally {\r\n      this.setState({ loading: false });\r\n    }\r\n  };\r\n  render() {\r\n    const { movieResults, tvResults, searchTerm, loading, error } = this.state;\r\n    return (\r\n      <SearchPresenter\r\n        movieResults={movieResults}\r\n        tvResults={tvResults}\r\n        loading={loading}\r\n        error={error}\r\n        searchTerm={searchTerm}\r\n        handleSubmit={this.handleSubmit}\r\n        updateTerm={this.updateTerm}\r\n      />\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Helmet } from \"react-helmet\";\r\nimport styled from \"styled-components\";\r\nimport Loader from \"Components/Loader\";\r\nimport Message from \"../../Components/Message\";\r\n\r\nconst Container = styled.div`\r\n  height: calc(100vh - 50px); /*calc는 calculate를 의미한다 산수 앞뒤 스페이스 필수*/\r\n  width: 100%;\r\n  position: relative;\r\n  padding: 50px;\r\n  /*상대 크기 %를 사용 vw와 vh는 화면 크기를 기준'\r\n  vw'및 'vh'는 일부 브라우저에서 지원되지 않을 수\r\n   있으므로 %가 더 좋습니다. */\r\n`;\r\n\r\nconst Backdrop = styled.div`\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  background-image: url(${(props) => props.bgImage});\r\n  background-position: center center;\r\n  background-size: cover;\r\n  filter: blur(3px); /*이걸로 포스터 희미하게 */\r\n  opacity: 0.5; /*이걸로 포스터 희미하게 */\r\n  z-index: 0;\r\n`;\r\n\r\nconst Content = styled.div`\r\n  display: flex;\r\n  width: 100%; /*father에게width가 없으면 children에게도 없다. #6.8 11분 20초 */\r\n  position: relative;\r\n  z-index: 1;\r\n  height: 100%;\r\n`;\r\n\r\nconst Cover = styled.div`\r\n  /*이것은 Detail들어가면 왼쪽 포스터 */\r\n  width: 30%;\r\n  background-image: url(${(props) => props.bgImage});\r\n  background-position: center center;\r\n  background-size: cover;\r\n  height: 100%;\r\n  border-radius: 10px;\r\n`;\r\n\r\nconst Data = styled.div`\r\n  width: 70%;\r\n  margin-left: 10px;\r\n`;\r\n\r\nconst Title = styled.h1`\r\n  font-size: 40px;\r\n  margin-bottom: 18px;\r\n`;\r\n\r\nconst ItemContainer = styled.div`\r\n  margin-bottom: 10px;\r\n`;\r\n\r\nconst Item = styled.span`\r\n  font-size: 20px;\r\n  color: gold;\r\n`;\r\n\r\nconst Divider = styled.span`\r\n  margin: 0 5px;\r\n  font-size: 15px;\r\n`;\r\n\r\nconst Overview = styled.p`\r\n  font-size: 15px;\r\n  opacity: 0.7;\r\n  line-height: 1.5; /*글자 줄당 위, 아래 간격 */\r\n  width: 60%;\r\n`;\r\n\r\nconst DetailPresenter = ({ result, loading, error }) =>\r\n  loading ? (\r\n    <>\r\n      <Helmet>\r\n        <title>Loading ParkFlix</title>\r\n      </Helmet>\r\n      <Loader />\r\n    </>\r\n  ) : error ? (\r\n    <Message />\r\n  ) : (\r\n    <Container>\r\n      <Helmet>\r\n        <title>{result.original_title ? result.original_title : result.original_name} ParkFlix</title>\r\n      </Helmet>\r\n      <Backdrop bgImage={`https://image.tmdb.org/t/p/original${result.backdrop_path}`} />\r\n      <Content>\r\n        <Cover\r\n          bgImage={\r\n            result.poster_path\r\n              ? `https://image.tmdb.org/t/p/original${result.poster_path}`\r\n              : require(\"../../assets/noPosterSmall.png\")\r\n          }\r\n        />\r\n        <Data>\r\n          <Title>{result.original_title ? result.original_title : result.original_name}</Title>\r\n          <ItemContainer>\r\n            <Item>{result.release_date ? result.release_date : result.first_air_date}</Item>\r\n            <Divider>🎞</Divider>\r\n            <Item>{result.release_date ? result.runtime : result.episode_run_time}min</Item>\r\n            <Divider>🎞</Divider>\r\n            <Item>\r\n              {result.genres &&\r\n                result.genres.map((genre, index) =>\r\n                  index === result.genres.length - 1 ? genre.name : `${genre.name} / `\r\n                )}\r\n            </Item>\r\n          </ItemContainer>\r\n          <Overview>{result.overview}</Overview>\r\n        </Data>\r\n      </Content>\r\n    </Container>\r\n  ); //위에 result.backdrop_path인 이유는 DetailContainer에서 data:result 이기 때문\r\n//result.release_date.substring(0, 4)이런 식으로 또 날짜 자르기 가능.\r\n//위에 release_date, first_air_date로 나뉘는 이유는 영화, TV가 각각 객체가 다르기 때문\r\n\r\nDetailPresenter.propTypes = {\r\n  result: PropTypes.object,\r\n  loading: PropTypes.bool.isRequired,\r\n  error: PropTypes.string,\r\n};\r\n\r\nexport default DetailPresenter;\r\n","import DetailContainer from \"./DetailContainer\";\r\n\r\nexport default DetailContainer;\r\n","import React from \"react\";\r\nimport DetailPresenter from \"./DetailPresenter\";\r\nimport { moviesApi, tvApi } from \"../../api\";\r\n\r\nexport default class extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    const {\r\n      location: { pathname },\r\n    } = props;\r\n    this.state = {\r\n      result: null,\r\n      error: null,\r\n      loading: true,\r\n      isMovie: pathname.includes(\"/movie/\"), //주소에 /movie가 있으면 true 없으면 false\r\n    };\r\n  }\r\n\r\n  async componentDidMount() {\r\n    const {\r\n      match: {\r\n        params: { id },\r\n      },\r\n      history: { push },\r\n    } = this.props; //history안에 push기능이 보내는기능 밑에 29번\r\n    const { isMovie } = this.state;\r\n    const parsedId = parseInt(id); //id가 string인걸 number로 바꾸어줌.\r\n    if (isNaN(parsedId)) {\r\n      return push(\"/\"); //home화면으로 꺼지라는거\r\n    }\r\n    let result = null;\r\n    try {\r\n      if (isMovie) {\r\n        ({ data: result } = await moviesApi.movieDetail(parsedId));\r\n        //const { data: result } 이거랑 같은거\r\n      } else {\r\n        ({ data: result } = await tvApi.showDetail(parsedId));\r\n      }\r\n    } catch {\r\n      this.setState({ error: \"Can't find anything.\" });\r\n    } finally {\r\n      this.setState({ loading: false, result });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { result, error, loading } = this.state;\r\n    return <DetailPresenter result={result} error={error} loading={loading} />;\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport { BrowserRouter as Router, Route, Redirect, Switch } from \"react-router-dom\";\r\nimport Home from \"Routes/Home\";\r\nimport TV from \"Routes/TV\";\r\nimport Header from \"Components/Header\";\r\nimport Search from \"Routes/Search\";\r\nimport Detail from \"Routes/Detail\";\r\n\r\nexport default () => (\r\n  <Router>\r\n    <>\r\n      <Header />\r\n      <Switch>\r\n        <Route path=\"/\" exact component={Home} />\r\n        <Route path=\"/tv\" component={TV} />\r\n        <Route path=\"/search\" component={Search} />\r\n        <Route path=\"/movie/:id\" component={Detail} />\r\n        <Route path=\"/show/:id\" component={Detail} />\r\n        <Redirect from=\"*\" to=\"/\" />\r\n      </Switch>\r\n    </>\r\n  </Router>\r\n);\r\n//Router는 오직 하나의 child만 가질 수 있다.\r\n//switch는 렌더할때 오직 한개의 Route만 render한다.\r\n//<Route path=\"/tv/popular\" render={() => <h1>Popular</h1>} />\r\n//redirect는 위에 주소들 중에서 아무것도 맞는게 없으면 어느 페이지든 받아서 /로 보내주는것.\r\n","import { createGlobalStyle } from \"styled-components\";\r\nimport reset from \"styled-reset\";\r\n\r\nconst globalStyles = createGlobalStyle`\r\n    ${reset};\r\n    a{\r\n        text-decoration:none;\r\n        color:inherit; /*부모 요소에서 값을 상속하도록 지정 */\r\n    }\r\n    *{\r\n        box-sizing:border-box;\r\n    }\r\n    body{\r\n        font-family:-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\r\n        padding-top:50px;\r\n        background-color:rgba(20, 20, 20, 1); /*거의 블랙*/\r\n        font-size:12px;\r\n        color:white;\r\n    }\r\n`;\r\n\r\nexport default globalStyles;\r\n\r\n//이걸 App.js에 Import함.\r\n","import React, { Component } from \"react\";\nimport Router from \"Components/Router\";\nimport GlobalStyles from \"Components/GlobalStyles\";\n\nclass App extends Component {\n  render() {\n    return (\n      <>\n        <Router />\n        <GlobalStyles />\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./Components/App\";\n//import App from \"Components/App\" 이렇게 해도 작동함 .env덕분임.\n//.env에서 기본적으로 src파일을 보게 만들어줌.\nimport \"./api\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}